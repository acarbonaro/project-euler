"""
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""


MAX = 4000000


def fibByMax(max = 10, sequence = []):
    """
    Run the Fibonacci sequcence until you get a value greater than the maximum
    and return everything below that.
    """
    start = sequence[-1] if sequence else 1
    previous = sequence[-2] if sequence else 0
    sequence += fib(start=start, previous=previous)
    if sequence[-1] < max:
        sequence = fibByMax(max=max, sequence=sequence)
    return [x for x in sequence if x < max]


def fib(terms = 10, start = 1, previous = 0):
    """
    Run through the Fibonacci sequence `terms` number of times, using `start` as
    the initial number and `previous` as the preceeding value.  Incidentally it
    means you can play with the Fibonacci sequence a little.
    """
    x = previous
    y = start
    sequence = []
    for i in range(terms):
        new = x + y
        sequence.append(new)
        if i % 2:
            y = new
        else:
            x = new
    return sequence


def test():
    return sum([x for x in fibByMax() if x % 2 == 0])


def solution():
    return sum([x for x in fibByMax(MAX) if x % 2 == 0])


if __name__ == "__main__":
    print(solution())
